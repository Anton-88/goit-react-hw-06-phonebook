{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/phonebook/actions.js","redux/phonebook/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/phonebook/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["module","exports","addContact","createAction","removeContact","filterValue","getContacts","state","contacts","getFilterValue","filter","ContactForm","contactNameID","uuidv4","contactNumberID","useSelector","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","e","currentTarget","value","resetForm","onSubmit","preventDefault","contact","id","map","includes","alert","onAddContact","className","styles","contact_form_container","contact_form_item","contact_form_label","htmlFor","type","placeholder","onChange","pattern","title","required","contact_add_btn","disabled","length","Filter","totalContacts","header","contacts_amount","contacts_amount_zero","filter_container","target","ContactList","filterVal","filteredContacts","useMemo","tempContacts","toLowerCase","contact_list","contact_list_item","contact_list_button","onClick","onRemoveContact","App","contactsList","createReducer","payload","contactsFilter","_","persistConfig","key","version","storage","whitelist","contactsReducer","combineReducers","persistedContactsReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c6a06f7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1nc0g\",\"contact_list_item\":\"ContactList_contact_list_item__2Vfvf\",\"contact_list_button\":\"ContactList_contact_list_button__31cxL\"};","//Using redux-toolkit\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contact/add\");\nexport const removeContact = createAction(\"contact/delete\");\nexport const filterValue = createAction(\"filter/value\");\n\n//using vanilla redux\n// export const addContact = (contact) => ({\n//   type: \"contact/add\",\n//   payload: contact,\n// });\n\n// export const removeContact = (id) => ({\n//   type: \"contact/remove\",\n//   payload: { id },\n// });\n\n// export const filterValue = (value) => ({\n//   type: \"filter/value\",\n//   payload: value,\n// })\n","export const getContacts = (state) => state.contacts;\nexport const getFilterValue = (state) => state.filter;\n","import styles from \"./ContactForm.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/phonebook/actions\";\nimport { getContacts } from \"../../redux/phonebook/selectors\";\n\nfunction ContactForm() {\n  const contactNameID = uuidv4();\n  const contactNumberID = uuidv4();\n\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const onAddContact = (contact) => dispatch(addContact(contact));\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    if (contacts.map((contact) => contact.name).includes(contact.name)) {\n      alert(`${contact.name} is in your contacts list already`);\n    } else {\n      onAddContact(contact);\n    }\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <>\n      <h1>PhoneBook</h1>\n      <form onSubmit={handleSubmit}>\n        <div className={styles.contact_form_container}>\n          <div className={styles.contact_form_item}>\n            <label\n              className={styles.contact_form_label}\n              htmlFor={contactNameID}\n            >\n              Contact name:\n            </label>\n            <input\n              id={contactNameID}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter contact name ...\"\n              onChange={handleChange}\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </div>\n          <div className={styles.contact_form_item}>\n            <label\n              className={styles.contact_form_label}\n              htmlFor={contactNumberID}\n            >\n              Contact number:\n            </label>\n            <input\n              id={contactNumberID}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter contact number ...\"\n              onChange={handleChange}\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className={styles.contact_add_btn}\n            disabled={!name || number.length < 5}\n          >\n            Add contact\n          </button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n\n//using vanilla redux\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onAddContact: (contact) => dispatch(addContact(contact)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport { filterValue } from \"../../redux/phonebook/actions\";\nimport { getContacts, getFilterValue } from \"../../redux/phonebook/selectors\";\n\nfunction Filter(/*{ onFilterChange }*/) {\n  const filter = useSelector(getFilterValue);\n  const totalContacts = useSelector(getContacts);\n  // console.log(`actions`, actions)\n  const dispatch = useDispatch();\n  const onFilterChange = (e) => dispatch(filterValue(e.target.value));\n\n  return (\n    <>\n      <h2 className={styles.header}>Contacts</h2>\n      {totalContacts.length > 0 ? (\n        <h4 className={styles.contacts_amount}>\n          {\" \"}\n          (there are {totalContacts.length} contacts in your phonebook)\n        </h4>\n      ) : (\n        <h4 className={styles.contacts_amount_zero}>\n          {\" \"}\n          (there are no contacts in your phonebook, please add some)\n        </h4>\n      )}\n      <div className={styles.filter_container}>\n        <h2>Find contact by name</h2>\n        <input type=\"text\" value={filter} onChange={onFilterChange} />\n      </div>\n    </>\n  );\n}\n\nexport default Filter;\n\n//using vanilla redux\n// const mapStateToProps = (state) => {\n//   return {\n//     value: state.filter,\n//   }\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n\n//   return {\n//     onFilterChange: e => dispatch(filterValue(e.target.value))\n//   }\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n};\n","import { PropTypes } from \"prop-types\";\nimport { useMemo } from \"react\";\nimport styles from \"./ContactList.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { removeContact } from \"../../redux/phonebook/actions\";\nimport { getContacts, getFilterValue } from \"../../redux/phonebook/selectors\";\n\nfunction ContactList() {\n  const contacts = useSelector(getContacts);\n  const filterVal = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n  const onRemoveContact = (id) => dispatch(removeContact(id));\n\n  // console.log(`contacts`, contacts)\n  // console.log(`filter`, filterVal.toLowerCase())\n\n  const filteredContacts = useMemo(() => {\n    const tempContacts = filterVal.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(tempContacts)\n    );\n  }, [filterVal, contacts]);\n\n  return (\n    <ul className={styles.contact_list}>\n      {filteredContacts &&\n        filteredContacts.map(({ name, number, id }) => (\n          <li className={styles.contact_list_item} key={uuidv4()}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              className={styles.contact_list_button}\n              type=\"button\"\n              onClick={() => onRemoveContact(id)}\n            >\n              Delete number\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n//using vanilla redux\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRemoveContact: (contact) => dispatch(removeContact(contact)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  state: PropTypes.arrayOf(PropTypes.any).isRequired,\n  onListChange: PropTypes.func.isRequired,\n};\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nexport default function App() {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","//using vanilla redux\nimport { combineReducers } from \"redux\";\n\n//using redux-toolkit\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, removeContact, filterValue } from \"./actions\";\n\nconst initState = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\n//using redux-toolkit\nexport const contactsList = createReducer(initState, {\n  [addContact]: (state, { payload }) => {\n    return [...state, payload];\n  },\n  [removeContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nexport const contactsFilter = createReducer(\"\", {\n  [filterValue]: (_, { payload }) => payload,\n});\n\n//using vanilla redux\n// const contactsList = (state = initState, action) => {\n//   switch (action.type) {\n//     case \"contact/add\":\n//       return [...state, action.payload];\n//     case \"contact/remove\":\n//       return state.filter((contact) => contact.id !== action.payload.id);\n//     default:\n//       return state;\n//   }\n// };\n\n// const contactsFilter = (state = \"\", action) => {\n//   return state;\n// };\n\n// export const contactsReducer = combineReducers({\n//   contacts: contactsList,\n//   filter: contactsFilter,\n// });\n","//Using redux-toolkit\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { contactsList, contactsFilter } from \"../redux/phonebook/reducers\";\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"products\",\n  version: 1,\n  storage,\n  whitelist: [\"contacts\"],\n};\n\nconst contactsReducer = combineReducers({\n  contacts: contactsList,\n  filter: contactsFilter,\n});\nconst persistedContactsReducer = persistReducer(persistConfig, contactsReducer);\n\nexport const store = configureStore({\n  reducer: persistedContactsReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\nexport const persistor = persistStore(store);\nconsole.log(`persistor`, persistor);\n\n//using vanilla redux\n// import { createStore } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import { contactsReducer } from \"./phonebook/reducers\";\n\n// export const store = createStore(contactsReducer, composeWithDevTools());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { persistor, store } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor} loading={null}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form_container\":\"ContactForm_contact_form_container__n5mJP\",\"contact_form_item\":\"ContactForm_contact_form_item__1271N\",\"contact_form_label\":\"ContactForm_contact_form_label__XlzLV\",\"contact_add_btn\":\"ContactForm_contact_add_btn__2U-pf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_container\":\"Filter_filter_container__35KlD\",\"header\":\"Filter_header__q2JTP\",\"contacts_amount\":\"Filter_contacts_amount__z0DsT\",\"contacts_amount_zero\":\"Filter_contacts_amount_zero__3OlV4\"};"],"sourceRoot":""}